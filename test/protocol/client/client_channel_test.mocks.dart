// Mocks generated by Mockito 5.1.0 from annotations
// in lime/test/protocol/client/client_channel_test.dart.
// Do not manually edit this file.

import 'dart:async' as _i2;
import 'dart:io' as _i5;

import 'package:lime/src/protocol/enums/session_compression.enum.dart' as _i6;
import 'package:lime/src/protocol/enums/session_encryption.enum.dart' as _i7;
import 'package:lime/src/protocol/envelope.dart' as _i8;
import 'package:lime/src/protocol/network/web_socket_transport.dart' as _i4;
import 'package:mockito/mockito.dart' as _i1;
import 'package:lime/src/services/logger.service.dart' as _i3;

// ignore_for_file: type=lint
// ignore_for_file: avoid_redundant_argument_values
// ignore_for_file: avoid_setters_without_getters
// ignore_for_file: comment_references
// ignore_for_file: implementation_imports
// ignore_for_file: invalid_use_of_visible_for_testing_member
// ignore_for_file: prefer_const_constructors
// ignore_for_file: unnecessary_parenthesis
// ignore_for_file: camel_case_types

class _FakeStreamController_0<T> extends _i1.Fake
    implements _i2.StreamController<T> {}

class _FakeSimpleLogger_1 extends _i1.Fake implements _i3.LoggerService {}

/// A class which mocks [WebSocketTransport].
///
/// See the documentation for Mockito's code generation for more information.
class MockWebSocketTransport extends _i1.Mock
    implements _i4.WebSocketTransport {
  set stream(_i2.StreamController<Map<String, dynamic>>? _stream) =>
      super.noSuchMethod(Invocation.setter(#stream, _stream),
          returnValueForMissingStub: null);
  @override
  set socket(_i5.WebSocket? _socket) =>
      super.noSuchMethod(Invocation.setter(#socket, _socket),
          returnValueForMissingStub: null);
  @override
  set sessionId(String? _sessionId) =>
      super.noSuchMethod(Invocation.setter(#sessionId, _sessionId),
          returnValueForMissingStub: null);
  @override
  _i2.StreamController<bool> get onClose =>
      (super.noSuchMethod(Invocation.getter(#onClose),
              returnValue: _FakeStreamController_0<bool>())
          as _i2.StreamController<bool>);
  @override
  set onClose(_i2.StreamController<bool>? _onClose) =>
      super.noSuchMethod(Invocation.setter(#onClose, _onClose),
          returnValueForMissingStub: null);
  @override
  _i3.LoggerService get logger =>
      (super.noSuchMethod(Invocation.getter(#logger),
          returnValue: _FakeSimpleLogger_1()) as _i3.LoggerService);
  @override
  set compression(_i6.SessionCompression? _compression) =>
      super.noSuchMethod(Invocation.setter(#compression, _compression),
          returnValueForMissingStub: null);
  @override
  set encryption(_i7.SessionEncryption? _encryption) =>
      super.noSuchMethod(Invocation.setter(#encryption, _encryption),
          returnValueForMissingStub: null);
  @override
  set onEnvelope(_i2.StreamController<Map<String, dynamic>>? _onEnvelope) =>
      super.noSuchMethod(Invocation.setter(#onEnvelope, _onEnvelope),
          returnValueForMissingStub: null);
  @override
  _i2.Future<void> open(String? uri, {bool useMtls = false}) =>
      (super.noSuchMethod(Invocation.method(#open, [uri]),
          returnValue: Future<void>.value(),
          returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  _i2.Future<void> close() => (super.noSuchMethod(Invocation.method(#close, []),
      returnValue: Future<void>.value(),
      returnValueForMissingStub: Future<void>.value()) as _i2.Future<void>);
  @override
  void send(_i8.Envelope? envelope) =>
      super.noSuchMethod(Invocation.method(#send, [envelope]),
          returnValueForMissingStub: null);
  @override
  void ensureSocketOpen() =>
      super.noSuchMethod(Invocation.method(#ensureSocketOpen, []),
          returnValueForMissingStub: null);
}
